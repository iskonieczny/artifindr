version: v0.10.1

# Notice how the ENV-Variable defined in ../docker-compose.yml will overwrite whats expressed here.
# This is true for *every* configuration value.
dsn: memory

serve:
  public:
    # Kratos uses cookies so you must always connect from "127.0.0.1"
    base_url: http://127.0.0.1:4433/
    cors:
      allowed_origins:
        - http://127.0.0.1:3000
      allowed_methods:
        - POST
        - GET
        - PUT
        - PATCH
        - DELETE
      allowed_headers:
        - Authorization
        - Cookie
        - Content-Type
      exposed_headers:
        - Content-Type
        - Set-Cookie
      enabled: true
      debug: true
  admin:
    base_url: http://127.0.0.1:4434/

identity:
  default_schema_id: default
  schemas:
    - id: default
      url: file:///etc/config/kratos/identity.schema.json

selfservice:
  default_browser_return_url: http://127.0.0.1:3000/
  methods:
    password:
      enabled: true
    link:
      enabled: true
    oidc:
      enabled: true
      config:
        providers:
          - id: google
            provider: generic
            client_id: "725681488714-qmmbpr7hr8pojdnmvtabdj8ad7mj1ak2.apps.googleusercontent.com"
            client_secret: "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"
            issuer_url: https://accounts.google.com
            auth_url: https://accounts.google.com/o/oauth2/v2/auth
            token_url: https://oauth2.googleapis.com/token
            mapper_url: file:///etc/config/kratos/google.jsonnet
            scope:
              - email
              - profile
            requested_claims:
              id_token:
                email:
                email_verified:

  # These `ui_url` values are entirely dependant upon your setup.
  # For this example, the React-app runs in development mode on the default port of 3000.
  # You can see how this would change for a production environment or other solutions.
  flows:
    error:
      ui_url: http://127.0.0.1:3000/auth/error
    registration:
      after:
        oidc:
          hooks:
            - hook: session

    settings:
      ui_url: http://127.0.0.1:3000/auth/settings
      privileged_session_max_age: 15m

    recovery:
      enabled: true
      ui_url: http://127.0.0.1:3000/auth/recovery

    verification:
      enabled: true
      ui_url: http://127.0.0.1:3000/auth/verify
      after:
        default_browser_return_url: http://127.0.0.1:3000/

    logout:
      after:
        default_browser_return_url: http://127.0.0.1:3000/auth/login

    login:
      ui_url: http://127.0.0.1:3000/auth/login
      lifespan: 10m
      after:
        password:
          hooks:
            - hook: require_verified_address

    registration:
      lifespan: 10m
      ui_url: http://127.0.0.1:3000/auth/register
      after:
        default_browser_return_url: http://127.0.0.1:3000
        password:
          hooks:
            # See the linked document for clarification. https://www.ory.sh/kratos/docs/self-service/hooks#session
            - hook: session

log:
  level: debug
  format: text
  leak_sensitive_values: true

secrets:
  cookie:
    # This is an example; secret must be this length (32 chars).
    - deVuA0F46ZWFh3v4wGPVEQDlVXMbLKzG

session:
  # Change this to values such as '1s', '1m', etc. to see how Kratos handles invalidating a session.
  lifespan: 720h

# These values can be gathered by using the kratos cli.
# The default values should work for testing.
# Read the linked documentation and the blog-post for more information concerning production-use.
# https://www.ory.sh/kratos/docs/guides/setting-up-password-hashing-parameters
# https://www.ory.sh/kratos/docs/debug/performance-out-of-memory-password-hashing-argon2
# https://www.ory.sh/choose-recommended-argon2-parameters-password-hashing/
hashers:
  argon2:
    parallelism: 1
    memory: "131072B"
    iterations: 2
    salt_length: 16
    key_length: 16

courier:
  smtp:
    connection_uri: smtps://artifindr@gmail.com:oplpqergzsjqagcy@smtp.gmail.com:465/
    #connection_uri: smtps://postmaster@sandboxa82ff0e6e62b44bd9a01525482bb3b30.mailgun.org:0de9f798070c8d586027717af85be12e-8845d1b1-8d400f5c@smtp.mailgun.org
    local_name: kratos
    #from_address: "artifindr@gmail.com"
    #from_name: "Artifindr"
  templates:
    verification:
        invalid:
          email:
            #https://github.com/leemunroe/responsive-html-email-template/blob/master/email.html
            body: {"html": "base64:"}
        valid:
          email:
            body: {"html": "base64:"}